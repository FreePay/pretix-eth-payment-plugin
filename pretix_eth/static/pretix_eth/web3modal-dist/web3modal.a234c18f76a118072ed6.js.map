{"version":3,"file":"web3modal.a234c18f76a118072ed6.js","mappings":"mBAEA,MAAMA,EAAuB,CACzBC,eAAgB,KAEhBC,0BAA0B,EAC1BC,gBAAiB,GAEjBC,SAAU,CACNC,SAAUC,SAASC,eAAe,iBAClCC,WAAYF,SAASC,eAAe,WACpCE,mBAAoBH,SAASC,eAAe,+BAC5CG,gBAAiBJ,SAASC,eAAe,2BACzCI,UAAWL,SAASC,eAAe,WACnCK,yBAA0BN,SAASC,eAAe,0CAEtDM,UAAW,CACPC,aAAcR,SAASS,iBAAiB,+BCZhDC,eAAeC,IACX,IAAIC,EAAMlB,EAAqBI,SAASM,gBAAgBS,aAAa,yBACrE,MAAMC,EDgCV,SAAmBC,GAEfA,GAAc,IAGd,MAGMC,EAHgBC,mBAAmBjB,SAASkB,QAGpBC,MAAM,KAGpC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAAK,CAErC,MAAMF,EAASF,EAAQI,GAAGE,OAG1B,GAA4B,GAAxBJ,EAAOK,QAAQR,GAEf,OAAOG,EAAOM,UAAUT,GAAaG,EAAOG,OAEpD,CACJ,CCrDwBI,CAAU,oBAE9B,IAAIC,QAAiBC,MAAMf,EAAK,CAC5BgB,QAAS,CACL,eAAgBd,EAChB,mBAAoBA,KAI5B,GAAIY,EAASG,GAAI,CACb,IAAIC,QAAaJ,EAASK,OACmB,KAAzCrC,EAAqBG,gBACrBH,EAAqBG,gBAAkBiC,EAAKE,OACrCtC,EAAqBG,kBAAoBiC,EAAKE,QAEjC,MAAhBF,EAAKE,QACLC,SAASC,QAGrB,CACJ,CCrB+G,OAA3DxC,EAAqBI,SAASQ,0BDuBlFI,iBACI,OAAa,CACT,UACUC,GACV,CAAE,MAAOwB,GAAK,OACR,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,MACrD,CACJ,CC7BiDE,E","sources":["webpack://web3modal_todo_rename/./src/interface.js","webpack://web3modal_todo_rename/./src/periodic_check.js","webpack://web3modal_todo_rename/./src/run_periodic_check.js"],"sourcesContent":["\"use strict\";\n\nconst GlobalPretixEthState = {\n    paymentDetails: null,\n    // payment flow flags\n    transactionHashSubmitted: false,\n    lastOrderStatus: '',\n    // interface and data-bearing tags\n    elements: {\n        divError: document.getElementById(\"message-error\"),\n        divSuccess: document.getElementById(\"success\"),\n        divTransactionHash: document.getElementById(\"pretix-eth-transaction-hash\"),\n        aOrderDetailURL: document.getElementById(\"pretix-order-detail-url\"),\n        buttonPay: document.getElementById(\"btn-pay\"),\n        submittedTransactionHash: document.getElementById(\"pretix-eth-submitted-transaction-hash\"),\n    },\n    selectors: {\n        paymentSteps: document.querySelectorAll(\".pretix-eth-payment-steps\")\n    },\n}\n\nfunction getTransactionDetailsURL() {\n    return GlobalPretixEthState.elements.buttonPay.getAttribute(\"data-transaction-details-url\");\n}\n\nasync function getPaymentTransactionData(refresh = false) {\n    if (!refresh && GlobalPretixEthState.paymentDetails !== null) {\n        return GlobalPretixEthState.paymentDetails\n    }\n\n    const response = await fetch(getTransactionDetailsURL());\n\n    if (response.status >= 400) { // TODO should this be `if response.status is not 2xx`?\n        throw \"Failed to fetch order details. If this problem persists, please contact the organizer directly.\";\n    }\n\n    return await response.json();\n}\n\nfunction getCookie(name) {\n    // Add the = sign\n    name = name + '=';\n\n    // Get the decoded cookie\n    const decodedCookie = decodeURIComponent(document.cookie);\n\n    // Get all cookies, split on ; sign\n    const cookies = decodedCookie.split(';');\n\n    // Loop over the cookies\n    for (let i = 0; i < cookies.length; i++) {\n        // Define the single cookie, and remove whitespace\n        const cookie = cookies[i].trim();\n\n        // If this cookie has the name of what we are searching\n        if (cookie.indexOf(name) == 0) {\n            // Return everything after the cookies name\n            return cookie.substring(name.length, cookie.length);\n        }\n    }\n}\n\n/*\n* Success and error handling\n*/\nfunction showError(message = '', reset_state = true) {\n    if (GlobalPretixEthState.transactionHashSubmitted) {\n        // do not display errors or reset state after the transaction hash has been successfully submitted to the BE\n        message = \"\";\n        reset_state = false;\n    } else {\n        if (typeof message === \"object\") {\n            if (message.data && message.data.message) {\n                message = message.data.message + \". Please try again.\"\n            } else if (message.message !== undefined) {\n                message = message.message + \". Please try again.\"\n            } else if (message.error !== undefined && message.error.message !== undefined) {\n                message = message.error.message + \". Please try again.\";\n            } else {\n                message = \"\";\n            }\n        }\n        if (message === \"\") {\n            message = \"There was an error, please try again, or contact support if you have already confirmed a payment in your wallet provider.\"\n        }\n    }\n\n    GlobalPretixEthState.elements.divError.innerHTML = message;\n\n    if (reset_state === true) {\n        displayOnlyId(\"pay\");\n    }\n    try {\n        GlobalPretixEthState.elements.buttonPay.removeAttribute(\"disabled\");\n    } catch (e) {\n        return false\n    }\n\n    return false\n}\n\nfunction resetErrorMessage() {\n    GlobalPretixEthState.elements.divError.innerHTML = '';\n}\n\nfunction displayOnlyId(divId) {\n    GlobalPretixEthState.selectors.paymentSteps.forEach(\n        function (div) {\n            if (div.id === divId) {\n                div.style.display = \"block\";\n            } else {\n                div.style.display = \"none\";\n            }\n        }\n    );\n}\n\nfunction showSuccessMessage(paymentDetails) {\n    GlobalPretixEthState.transactionHashSubmitted = true;\n    GlobalPretixEthState.elements.divTransactionHash.innerHTML = `${paymentDetails.transactionHash} on ${paymentDetails.chainName} (chain ID ${paymentDetails.chainId}) <a href=\"${paymentDetails.receiptUrl}\" target=\"_blank\">receipt</a>`;\n    displayOnlyId();\n    GlobalPretixEthState.elements.divSuccess.style.display = \"block\";\n}\n\nexport {\n    GlobalPretixEthState, displayOnlyId, getCookie, getPaymentTransactionData, getTransactionDetailsURL, resetErrorMessage, showError, showSuccessMessage\n};\n","import { getCookie, GlobalPretixEthState } from \"./interface.js\";\n\n// periodicCheck monitors for an existing unconfirmed payment to become\n// confirmed and when it does, reload the page to render with fresh\n// confirmation state.\nasync function periodicCheck() {\n    let url = GlobalPretixEthState.elements.aOrderDetailURL.getAttribute(\"data-order-detail-url\");\n    const csrf_cookie = getCookie('pretix_csrftoken')\n\n    let response = await fetch(url, {\n        headers: {\n            'X-CSRF-TOKEN': csrf_cookie,\n            'HTTP-X-CSRFTOKEN': csrf_cookie,\n        }\n    });\n\n    if (response.ok) {\n        let data = await response.json()\n        if (GlobalPretixEthState.lastOrderStatus === '') {\n            GlobalPretixEthState.lastOrderStatus = data.status;\n        } else if (GlobalPretixEthState.lastOrderStatus !== data.status) {\n            // status has changed to PAID\n            if (data.status === 'p') {\n                location.reload();\n            }\n        }\n    }\n}\n\nasync function runPeriodicCheck() {\n    while (true) {\n        try {\n            await periodicCheck();\n        } catch (e) { }\n        await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n}\n\nexport { runPeriodicCheck };\n","import {\n    GlobalPretixEthState,\n} from \"./interface.js\";\nimport { runPeriodicCheck } from \"./periodic_check.js\";\n\n(() => { // attempt to begin running a listener to monitor for an existing unconfirmed payment to become confirmed. WARNING here we must not rely on `window.addEventListener('load')` as the load event may have already fired by the time this executes\n    const didUserSubmitAPaymentTransactionAlready = GlobalPretixEthState.elements.submittedTransactionHash !== null; // WARNING here we rely on this html element being defined if and only if the user already submitted a payment transaction for this order\n    if (didUserSubmitAPaymentTransactionAlready) runPeriodicCheck();\n})();\n"],"names":["GlobalPretixEthState","paymentDetails","transactionHashSubmitted","lastOrderStatus","elements","divError","document","getElementById","divSuccess","divTransactionHash","aOrderDetailURL","buttonPay","submittedTransactionHash","selectors","paymentSteps","querySelectorAll","async","periodicCheck","url","getAttribute","csrf_cookie","name","cookies","decodeURIComponent","cookie","split","i","length","trim","indexOf","substring","getCookie","response","fetch","headers","ok","data","json","status","location","reload","e","Promise","resolve","setTimeout","runPeriodicCheck"],"sourceRoot":""}