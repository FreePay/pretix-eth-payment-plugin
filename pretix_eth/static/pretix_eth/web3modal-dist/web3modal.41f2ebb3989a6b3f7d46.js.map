{"version":3,"file":"web3modal.41f2ebb3989a6b3f7d46.js","mappings":"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","sources":["webpack://web3modal_todo_rename/./src/interface.js","webpack://web3modal_todo_rename/./src/periodic_check.js","webpack://web3modal_todo_rename/./src/core.js","webpack://web3modal_todo_rename/./src/web3modal.js"],"sourcesContent":["\"use strict\";\n\nconst GlobalPretixEthState = {\n    paymentDetails: null,\n    // payment flow flags\n    transactionHashSubmitted: false,\n    lastOrderStatus: '',\n    // interface and data-bearing tags\n    elements: {\n        divError: document.getElementById(\"message-error\"),\n        divSuccess: document.getElementById(\"success\"),\n        divTransactionHash: document.getElementById(\"pretix-eth-transaction-hash\"),\n        aOrderDetailURL: document.getElementById(\"pretix-order-detail-url\"),\n        buttonPay: document.getElementById(\"btn-pay\"),\n        submittedTransactionHash: document.getElementById(\"pretix-eth-submitted-transaction-hash\"),\n    },\n    selectors: {\n        paymentSteps: document.querySelectorAll(\".pretix-eth-payment-steps\")\n    },\n}\n\nfunction getTransactionDetailsURL() {\n    return GlobalPretixEthState.elements.buttonPay.getAttribute(\"data-transaction-details-url\");\n}\n\nasync function getPaymentTransactionData(refresh = false) {\n    if (!refresh && GlobalPretixEthState.paymentDetails !== null) {\n        return GlobalPretixEthState.paymentDetails\n    }\n\n    const response = await fetch(getTransactionDetailsURL());\n\n    if (response.status >= 400) { // TODO should this be `if response.status is not 2xx`?\n        throw \"Failed to fetch order details. If this problem persists, please contact the organizer directly.\";\n    }\n\n    return await response.json();\n}\n\nfunction getCookie(name) {\n    // Add the = sign\n    name = name + '=';\n\n    // Get the decoded cookie\n    const decodedCookie = decodeURIComponent(document.cookie);\n\n    // Get all cookies, split on ; sign\n    const cookies = decodedCookie.split(';');\n\n    // Loop over the cookies\n    for (let i = 0; i < cookies.length; i++) {\n        // Define the single cookie, and remove whitespace\n        const cookie = cookies[i].trim();\n\n        // If this cookie has the name of what we are searching\n        if (cookie.indexOf(name) == 0) {\n            // Return everything after the cookies name\n            return cookie.substring(name.length, cookie.length);\n        }\n    }\n}\n\n/*\n* Success and error handling\n*/\nfunction showError(message = '', reset_state = true) {\n    if (GlobalPretixEthState.transactionHashSubmitted) {\n        // do not display errors or reset state after the transaction hash has been successfully submitted to the BE\n        message = \"\";\n        reset_state = false;\n    } else {\n        if (typeof message === \"object\") {\n            if (message.data && message.data.message) {\n                message = message.data.message + \". Please try again.\"\n            } else if (message.message !== undefined) {\n                message = message.message + \". Please try again.\"\n            } else if (message.error !== undefined && message.error.message !== undefined) {\n                message = message.error.message + \". Please try again.\";\n            } else {\n                message = \"\";\n            }\n        }\n        if (message === \"\") {\n            message = \"There was an error, please try again, or contact support if you have already confirmed a payment in your wallet provider.\"\n        }\n    }\n\n    GlobalPretixEthState.elements.divError.innerHTML = message;\n\n    if (reset_state === true) {\n        displayOnlyId(\"pay\");\n    }\n    try {\n        GlobalPretixEthState.elements.buttonPay.removeAttribute(\"disabled\");\n    } catch (e) {\n        return false\n    }\n\n    return false\n}\n\nfunction resetErrorMessage() {\n    GlobalPretixEthState.elements.divError.innerHTML = '';\n}\n\nfunction displayOnlyId(divId) {\n    GlobalPretixEthState.selectors.paymentSteps.forEach(\n        function (div) {\n            if (div.id === divId) {\n                div.style.display = \"block\";\n            } else {\n                div.style.display = \"none\";\n            }\n        }\n    );\n}\n\nfunction showSuccessMessage(paymentDetails) {\n    GlobalPretixEthState.transactionHashSubmitted = true;\n    GlobalPretixEthState.elements.divTransactionHash.innerHTML = `${paymentDetails.transactionHash} on ${paymentDetails.chainName} (chain ID ${paymentDetails.chainId}) <a href=\"${paymentDetails.receiptUrl}\" target=\"_blank\">receipt</a>`;\n    displayOnlyId();\n    GlobalPretixEthState.elements.divSuccess.style.display = \"block\";\n}\n\nexport {\n    GlobalPretixEthState, displayOnlyId, getCookie, getPaymentTransactionData, getTransactionDetailsURL, resetErrorMessage, showError, showSuccessMessage\n};\n","import { getCookie, GlobalPretixEthState } from \"./interface.js\";\n\n// periodicCheck monitors for an existing unconfirmed payment to become\n// confirmed and when it does, reload the page to render with fresh\n// confirmation state.\nasync function periodicCheck() {\n    let url = GlobalPretixEthState.elements.aOrderDetailURL.getAttribute(\"data-order-detail-url\");\n    const csrf_cookie = getCookie('pretix_csrftoken')\n\n    let response = await fetch(url, {\n        headers: {\n            'X-CSRF-TOKEN': csrf_cookie,\n            'HTTP-X-CSRFTOKEN': csrf_cookie,\n        }\n    });\n\n    if (response.ok) {\n        let data = await response.json()\n        if (GlobalPretixEthState.lastOrderStatus === '') {\n            GlobalPretixEthState.lastOrderStatus = data.status;\n        } else if (GlobalPretixEthState.lastOrderStatus !== data.status) {\n            // status has changed to PAID\n            if (data.status === 'p') {\n                location.reload();\n            }\n        }\n    }\n}\n\nasync function runPeriodicCheck() {\n    while (true) {\n        try {\n            await periodicCheck();\n        } catch (e) { }\n        await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n}\n\nexport { runPeriodicCheck };\n","\"use strict\";\n\nimport {\n    GlobalPretixEthState,\n    getCookie,\n    getPaymentTransactionData,\n    getTransactionDetailsURL,\n    resetErrorMessage,\n    showError,\n    showSuccessMessage\n} from './interface.js';\nimport { runPeriodicCheck } from './periodic_check.js';\n\n// TODO doc\nlet singleton3citiesIframeMessageEventHandler = undefined;\nfunction createOrUpdateSingleton3citiesIframeMessageEventHandler({ tcOrigin, onTransactionSigned, onCloseIframe }) {\n    if (singleton3citiesIframeMessageEventHandler) {\n        window.removeEventListener('message', singleton3citiesIframeMessageEventHandler, true);\n        singleton3citiesIframeMessageEventHandler = undefined;\n    }\n\n    singleton3citiesIframeMessageEventHandler = (event) => {\n        if (event.origin === tcOrigin) { // WARNING this is a crucial security check to ensure that this message has been sent from the expected 3cities iframe origin. Otherwise, any window can claim to be sending a message from 3cities\n            if (event !== null && typeof event === 'object' && event.data !== null && typeof event.data === 'object') {\n                if (event.data.kind === 'TransactionSigned') onTransactionSigned(event.data);\n                else if (event.data.kind === 'CloseIframe') onCloseIframe();\n                else if (event.data.kind === 'Checkout') {\n                    // no-op on Checkout event\n                }\n                else console.error(\"Unexpected kind of event from 3cities, kind=\", event.data.kind);\n            } else console.error(\"Unexpected event from 3cities\", event);\n        }\n    };\n    window.addEventListener('message', singleton3citiesIframeMessageEventHandler, true);\n}\n\nfunction make3citiesIframe({\n    tcBaseUrl, // string. 3cities client base URL. TODO enumerate the checkout data that currently must be included in the base url vs. those supplied below as url params\n    receiverAddress, // string address `0x${string}`. Receiver address to which payment will be sent.\n    paymentLogicalAssetAmountInUsd, // string. 18 decimal full precision US Dollar amount due for this payment. Ie. `$1 = (10**18).toString()`\n    primaryCurrency, // string. Primary logical currency in which to denominate this payment (\"USD\", \"ETH\", etc). Currency must be supported by 3cities.\n    usdPerEth, // string decimal number, eg. '4012.56'. USD/ETH rate to use for this payment. 3cities has its own internal exchange rates but they may be overridden, as we are doing here.\n    onTransactionSigned, // callback to invoke on 3cities TransactionSigned event. See below for signature type\n}) {\n    const tcIframeContainerId = \"3cities-iframe-container\";\n\n    createOrUpdateSingleton3citiesIframeMessageEventHandler({\n        tcOrigin: new URL(tcBaseUrl).origin,\n        onTransactionSigned,\n        onCloseIframe: () => { removeElementById(tcIframeContainerId); },\n    })\n\n    // TODO create a real 3cities SDK that configures these options, generates the final 3cities URL, and instantiates/styles the iframe\n\n    // BEGIN - mock 3cities options to later be migrated to SDK\n    // TODO pass ethusd exchange rate to 3cities to override 3cities' own internal exchange rate engine with the user's guaranteed rate determined internally by pretix\n    // TODO set 3cities SDK receiver address from GlobalPretixEthState.paymentDetails['recipient_address'] and also support an optionally distinct receiver address per chain --> WARNING, right now, the configured receiver address in pretix-eth (ie. globalPretixEthState.paymentDetails['recipient_address']) must coincidentally be the same value as the receiver address baked into the 3cities base URL\n    const requireInIframeOrErrorWith = 'Standalone page detected. Please use the \"Click here to pay\" pop-up in Pretix'; // require 3cities to be embedded as an iframe by way of refusing to proceed with payment unless a parent window is detected. For pretix-eth, this prevents payments from occurring in a context where the pretix web client ends up not being the parent window and thus can't receive the user's signature and transaction details via window.parent.postMessage. For example, some wallet connection libraries can cause the 3cities iframe to be opened in a new browser; instead, the user should open the pretix web app in the new browser --> TODO instead of just error msg, optionally allow a redirect URL (\"You need to pay inside Pretix. Redirecting you automatically back to pretex... click here if it doesn't happen\")\n    const iframeParentWindowOrigin = window.location.origin; // iff defined, if 3cities calls window.parent.postMessage, then 3cities will require that the window receiving the message has this origin. In practice, this means that only this window may receive the user's signature and transaction details when 3cities calls postMessage\n    const authenticateSenderAddress = { // iff this config object is defined, 3cities will ask the user for a CAIP-222-style signature to authenticate their ownership of the connected wallet address prior to checking out. This signature can then be obtained from the 3cities iframe by way of window.parent.postMessage and, in future, via webhooks and/or redirect URL params\n        verifyEip1271Signature: true, // iff this is true, 3cities will attempt to detect if the user's conected address is a smart contract wallet, and if this is detected, 3cities will verify the eip1271 signature by requiring an isValidSignature call to return true before allowing payment to proceed. While this clientside call to isValidSignature is insecure from the point of view of the serverside verifier, in practice, this can help prevent a user from paying with a wallet whose ownership signature can't later be verified by the serverside verifier. If user's connected address is a counterfactually instantiated smart contract wallet, then it'll appear to be an EOA to the 3cities iframe and this verification will be skipped prior to payment. However, after payment, the serverside verifier may optionally detect this address as a smart contract wallet and verify the eip1271 signature at that point --> WARNING 3cities does not actually perform this verification yet\n    };\n    const clickToCloseIframeLabel = 'Return to Ticket Shop'; // If this is defined as a string, upon successful checkout, 3cities will present the user with a button to close the iframe, and this button's label will be this string value. If undefined, 3cities's default behavior upon successful checkout is to show a QR code with the payment receipt, and the user can still close the iframe by clicking the X in the corner or anywhere outside the iframe. Note that iframes can't close themselves, see CloseIframe handler here.\n    const requireNativeTokenTransferProxy = true; // iff this is true, 3cities will route any native token transfers through a proxy that emits an ERC20-compliant Transfer event. This must be true for the offchain verifier to detect and successfully verify ETH payments\n    // END - mock 3cities options to later be migrated to SDK\n\n    const computedThreeCitiesUrl = (() => {\n        // today, tcBaseUrl is expected to be of the form `#/?pay=...` ie. having synthetic URL parameters as part of the hash fragment. As a result, we can't use the browser URL API to append search parameters as this api isn't designed to recognize our synthetic search parameters in the hash fragment. Instead, we apply new search params using array-based string manipulation:\n        const urlParts = [tcBaseUrl];\n        urlParts.push(`&receiverAddress=${encodeURIComponent(receiverAddress)}`);\n        urlParts.push(`&amount=${encodeURIComponent(paymentLogicalAssetAmountInUsd)}`);\n        urlParts.push(`&currency=${encodeURIComponent(primaryCurrency)}`);\n        urlParts.push(`&usdPerEth=${encodeURIComponent(usdPerEth)}`);\n        if (requireInIframeOrErrorWith) urlParts.push(`&requireInIframeOrErrorWith=${encodeURIComponent(requireInIframeOrErrorWith)}`);\n        if (iframeParentWindowOrigin) urlParts.push(`&iframeParentWindowOrigin=${encodeURIComponent(iframeParentWindowOrigin)}`)\n        if (authenticateSenderAddress) {\n            urlParts.push('&authenticateSenderAddress=1');\n            if (authenticateSenderAddress.verifyEip1271Signature) urlParts.push('&verifyEip1271Signature=1');\n        }\n        if (clickToCloseIframeLabel) urlParts.push(`&clickToCloseIframeLabel=${encodeURIComponent(clickToCloseIframeLabel)}`);\n        if (requireNativeTokenTransferProxy) urlParts.push('&requireNativeTokenTransferProxy=1');\n        const url = urlParts.join('');\n        return url;\n    })();\n    makeIframeModal(tcIframeContainerId, computedThreeCitiesUrl);\n\n    function removeElementById(id) {\n        const el = document.getElementById(id);\n        if (el) el.remove();\n    }\n\n    function makeIframeModal(iframeContainerId, url) {\n        // WARNING this unreadable code is a 1-liner generated by 3cities \"HTML embed\" feature and is intended to be a temporary solution for an iframe modal. TODO replace this with an iframe created internally in a real 3cities SDK\n        (function () { let m = document.createElement('div'); m.id = iframeContainerId; m.style = 'position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,0.5);z-index:9999;display:flex;align-items:center;justify-content:center;'; m.onclick = function (e) { if (e.target === m) { removeModal(); } }; let removeModal = function () { if (document.body.contains(m)) { document.body.removeChild(m); document.removeEventListener('keydown', escListener); } }; let escListener = function (e) { if (e.key === 'Escape') { removeModal(); } }; document.addEventListener('keydown', escListener); let mc = document.createElement('div'); let maxWidth = window.innerWidth < 481 ? (window.innerWidth - 30) + 'px' : '451px' /* WARNING 3cities's responsive design breakpoint for mobile/small screens is 435px. This means that if 3cities's width is >= 435px, it'll be displayed in desktop mode. Here we set max width to 451px because 435px 3cities width + 8px padding on left/right = 451px and we want the modal pop-up to be displayed in desktop mode (on desktop) so that the UI elements specific to desktop are included in the payment UX, such as changing the colors of buttons when the mouse hovers over them */; mc.style = 'background-color:#f1f1f1;padding:8px;width:100%;max-width:' + maxWidth + ';height:95vh;max-height:1024px;border-radius:10px;position:relative;box-shadow:0 4px 6px rgba(0,0,0,0.1), 0 2px 4px rgba(0,0,0,0.06);margin:auto;'; let i = document.createElement('iframe'); i.allow = 'clipboard-write' /* allow writing to the OS clipboard inside the iframe, eg. to copy walletconnect code */; i.style = 'width:100%;height:100%;border:0;'; i.src = url; let c = document.createElement('div'); c.style = 'position:absolute;top:5px;right:5px;width:24px;height:24px;cursor:pointer;z-index:10;'; c.innerHTML = '<svg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 20 20\\' fill=\\'currentColor\\' style=\\'width:100%;height:100%;\\'><path fill-rule=\\'evenodd\\' clip-rule=\\'evenodd\\' d=\\'M10 9.293l5.146-5.147a.5.5 0 01.708.708L10.707 10l5.147 5.146a.5.5 0 01-.708.708L10 10.707l-5.146 5.147a.5.5 0 01-.708-.708L9.293 10 4.146 4.854a.5.5 0 11.708-.708L10 9.293z\\'></path></svg>'; c.onclick = function () { removeModal(); }; mc.appendChild(i); mc.appendChild(c); m.appendChild(mc); document.body.appendChild(m); })();\n    }\n}\n\n// TODO doc\nasync function makePayment() {\n    async function _tryToStartPaymentFlow() {\n        // refresh paymentDetails in case account has changed\n        GlobalPretixEthState.paymentDetails = await getPaymentTransactionData(true);\n\n        if (GlobalPretixEthState.paymentDetails['is_signature_submitted'] === true) {\n            showError(\"It seems that you have paid for this order already.\");\n            return;\n        }\n\n        // WARNING the value 'has_other_unpaid_orders' is true iff the user's sender address has signed messages for other unpaid orders (see retrieve() in views.py). However, with 3cities, we aren't able to construct this value because the user's sender address is hidden inside the iframe (and not yet connected at this point in the payment flow). So, this check has been dropped. TODO what's the impact here? --> rm this code?\n        // if (GlobalPretixEthState.paymentDetails['has_other_unpaid_orders'] === true) {\n        //     showError(\"Please wait for other payments from your wallet to be confirmed before submitting another transaction.\")\n        //     return;\n        // }\n\n        make3citiesIframe({\n            tcBaseUrl: 'https://3cities.xyz/#/pay?c=CAESFGdAb29187sroN7d8mdtO6b1XHAPIgICASoCARA6DEVUSCBXRVRIIERBSUowAQoBAAoEAgEGAQoIBAUDCgUDBAMFAgoHBwcHBwcHCgUJAQQECggBBAUHCgMEBAQD', // this is a production payment link with baked in settings: single receiver address 0x67406f6F75F3Bb2bA0DeDdf2676D3bA6F55C700F; chain allowlist: Ethereum Mainnet, OP Mainnet, Arbitrum One, Scroll, Linea, Zora, Base, Blast, Mode; TODO add zkSync Era after multi receiver address is implemented and Taiko; TODO add Polygon zkEVM after the payment bugs on it are fixed; token allowlist: ETH, WETH, DAI; TODO add USDC, USDT, LUSD, USDP, PYUSD, GUSD after legal approval; TODO add USDGLO to 3cities --> TODO pass chain/token allowlist as URL params sourced from plugin config\n            receiverAddress: GlobalPretixEthState.paymentDetails['recipient_address'],\n            paymentLogicalAssetAmountInUsd: GlobalPretixEthState.paymentDetails['amount'],\n            primaryCurrency: GlobalPretixEthState.paymentDetails['primary_currency'],\n            usdPerEth: GlobalPretixEthState.paymentDetails['usd_per_eth'],\n            onTransactionSigned: submitPaymentDetailsToServer,\n        });\n    }\n\n    resetErrorMessage();\n\n    try {\n        await _tryToStartPaymentFlow();\n    } catch (error) {\n        console.error('Pay flow error:', error);\n        showError(error, true);\n    }\n}\n\nasync function submitPaymentDetailsToServer(paymentDetails) {\n    /*\n    NB type of message sent from 3cities upon successful checkout:\n    {\n        kind: 'Checkout';\n        signature: `0x${string}` | `eip1271-chainId-${number}`; // a successfully collected Caip222-style signature. `0x${string}` indicates an ordinary signature. `eip1271-chainId-${number}` indicates a smart contract wallet verified the message using eip1271 verification via a isValidSignature call on the provided chainId;\n        message: {\n            senderAddress: `0x${string}`;\n        };\n        transactionHash: string;\n        chainId: number;\n        // ... more insecure fields for admin convenience\n    }\n    */\n\n    async function _submitPaymentDetailsToServer(paymentDetails) {\n        const csrf_cookie = getCookie('pretix_csrftoken') || getCookie('__Host-pretix_csrftoken'); // in devserver builds, pretix provides pretix_csrftoken without the __Host- pretix\n        const url = getTransactionDetailsURL();\n        const searchParams = new URLSearchParams({\n            csrfmiddlewaretoken: csrf_cookie,\n            senderAddress: paymentDetails.caip222StyleMessageThatWasSigned.senderAddress, // we extract senderAddress and send it separately because the backend wants senderAddress as structured data but the type of `message` is opaque to the backend (ie. the backend treats its received `message` as a blob)\n            signature: paymentDetails.caip222StyleSignature,\n            message: JSON.stringify(paymentDetails.caip222StyleMessageThatWasSigned),\n            transactionHash: paymentDetails.transactionHash,\n            chainId: paymentDetails.chainId,\n            tokenTicker: paymentDetails.tokenTicker,\n            tokenName: paymentDetails.tokenName,\n            tokenAmount: paymentDetails.tokenAmount,\n            tokenDecimals: paymentDetails.tokenDecimals,\n        });\n        // Some fields may be undefined and if so should be excluded:\n        if (typeof paymentDetails.receiptUrl !== 'undefined') searchParams.append('receiptUrl', paymentDetails.receiptUrl);\n        if (typeof paymentDetails.tokenCurrency !== 'undefined') searchParams.append('tokenCurrency', paymentDetails.tokenCurrency);\n        if (typeof paymentDetails.tokenContractAddress !== 'undefined') searchParams.append('tokenContractAddress', paymentDetails.tokenContractAddress);\n        if (typeof paymentDetails.chainName !== 'undefined') searchParams.append('chainName', paymentDetails.chainName);\n        if (typeof paymentDetails.isTestnet !== 'undefined') searchParams.append('isTestnet', paymentDetails.isTestnet);\n        const params = {\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                'X-CSRFToken': csrf_cookie,\n            },\n            method: 'POST',\n            mode: 'same-origin',\n            body: searchParams,\n        };\n        fetchWithRetry(url, params);\n\n        async function fetchWithRetry(url, params, attempt = 1) {\n            const maxBackoff = 300000; // Maximum backoff time in milliseconds (5 minutes)\n            const backoff = Math.min(maxBackoff, Math.pow(2, attempt) * 1500); // Exponential backoff formula\n\n            try {\n                const response = await fetch(url, params);\n                if (response.ok) {\n                    showError(' ', false); // clear any error from previous attempts --> the non-empty string here is essential to avoid a default error message\n                    showSuccessMessage(paymentDetails);\n                    await runPeriodicCheck();\n                } else {\n                    throw new Error('Response not OK');\n                }\n            } catch (error) {\n                showError(`Do not close this window yet! There was an error processing your payment. We will re-try shortly. If this error does not go away, please contact support. Save these details: Your payment was sent in transaction ${paymentDetails.transactionHash} on ${paymentDetails.chainName} (chain ID ${paymentDetails.chainId}). Receipt link ${paymentDetails.receiptUrl}.`, false);\n                setTimeout(() => fetchWithRetry(url, params, attempt + 1), backoff);\n            }\n        }\n    }\n    try {\n        await _submitPaymentDetailsToServer(paymentDetails);\n    } catch (error) {\n        showError(error, true);\n    }\n}\n\nexport { makePayment };\n","\"use strict\";\n\n// TODO rename this file to something-not-web3modal\n\nimport { makePayment } from './core.js';\n\nasync function init() {\n    document.title = 'Pretix Payment'; // some wallets read the page title and presents it to the user in the wallet - the pretix generated one looks confusing, so we override it\n    document.getElementById('spinner').style.display = 'none';\n    const payButton = document.getElementById('btn-pay');\n    if (payButton) payButton.addEventListener('click', makePayment);\n    else console.error('No pay button found');\n}\n\ninit();\n"],"names":["GlobalPretixEthState","paymentDetails","transactionHashSubmitted","lastOrderStatus","elements","divError","document","getElementById","divSuccess","divTransactionHash","aOrderDetailURL","buttonPay","submittedTransactionHash","selectors","paymentSteps","querySelectorAll","getTransactionDetailsURL","getAttribute","getCookie","name","cookies","decodeURIComponent","cookie","split","i","length","trim","indexOf","substring","showError","message","reset_state","data","undefined","error","innerHTML","displayOnlyId","removeAttribute","e","divId","forEach","div","id","style","display","async","periodicCheck","url","csrf_cookie","response","fetch","headers","ok","json","status","location","reload","singleton3citiesIframeMessageEventHandler","makePayment","refresh","getPaymentTransactionData","tcBaseUrl","receiverAddress","paymentLogicalAssetAmountInUsd","primaryCurrency","usdPerEth","onTransactionSigned","tcIframeContainerId","tcOrigin","onCloseIframe","window","removeEventListener","event","origin","kind","console","addEventListener","createOrUpdateSingleton3citiesIframeMessageEventHandler","URL","el","remove","removeElementById","requireInIframeOrErrorWith","iframeParentWindowOrigin","authenticateSenderAddress","verifyEip1271Signature","clickToCloseIframeLabel","computedThreeCitiesUrl","urlParts","push","encodeURIComponent","join","iframeContainerId","m","createElement","onclick","target","removeModal","body","contains","removeChild","escListener","key","mc","maxWidth","innerWidth","allow","src","c","appendChild","make3citiesIframe","submitPaymentDetailsToServer","_tryToStartPaymentFlow","searchParams","URLSearchParams","csrfmiddlewaretoken","senderAddress","caip222StyleMessageThatWasSigned","signature","caip222StyleSignature","JSON","stringify","transactionHash","chainId","tokenTicker","tokenName","tokenAmount","tokenDecimals","receiptUrl","append","tokenCurrency","tokenContractAddress","chainName","isTestnet","fetchWithRetry","params","attempt","backoff","Math","min","pow","Error","showSuccessMessage","Promise","resolve","setTimeout","runPeriodicCheck","method","mode","_submitPaymentDetailsToServer","title","payButton","init"],"sourceRoot":""}